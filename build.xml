<?xml version="1.0"?>
<project name="web3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
<!--        <pathelement location="${junit}"/>-->
<!--        <pathelement location="${hamcrest}"/>-->
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="compile" depends="clean">
        <echo message="***** COMPILING STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
        <echo message="***** COMPILING COMPLETED *****"/>
    </target>

    <target name="build" depends="compile">
        <echo message="***** BUILDING STARTED *****"/>
        <copy todir="${build.dir}" >
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Daria and Maria" />
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="Main"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.webxml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Daria and Maria" />
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="NoClass" />
            </manifest>
        </war>
        <echo message="***** BUILDING COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEANING STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <delete dir="${doc.dir}"/>
        <echo message="***** CLEANING COMPLETED *****"/>
    </target>

<!--    <target name="build" depends="compile">-->
<!--        <jar destfile="${dist.jar}" basedir="${target.classes}" compress="false" index="true">-->
<!--            <manifest>-->
<!--                <attribute name="Main-Class" value="io.github.web32909231800.Main"/>-->
<!--            </manifest>-->
<!--        </jar>-->
<!--        <echo message="Successfully built"/>-->
<!--    </target>-->

<!--    <target name="music">-->
<!--        <sound>-->
<!--            <success source="${source.dir}/main/resources/success.wav"/>-->
<!--            <fail source="${source.dir}/main/resources/fail.wav"/>-->
<!--        </sound>-->
<!--        <runtarget target="build"/>-->
<!--    </target>-->

<!--    <target name="clean">-->
<!--        <trycatch>-->
<!--            <try>-->
<!--                <delete dir="${target}"/>-->
<!--            </try>-->
<!--            <catch>-->
<!--                <echo message="Couldn't clean automatically, please, check existence or access to ${target}"/>-->
<!--            </catch>-->
<!--        </trycatch>-->
<!--        <echo message="Cleaned target"/>-->
<!--    </target>-->

<!--    <target name="cleanDist" depends="clean">-->
<!--        <trycatch>-->
<!--            <try>-->
<!--                <delete dir="${dist.dir}"/>-->
<!--                <delete dir="${doc.dir}"/>-->
<!--            </try>-->
<!--            <catch>-->
<!--                <echo message="Couldn't clean dist automatically, please, check existence or access to ${dist.dir} and ${doc.dir}"/>-->
<!--            </catch>-->
<!--        </trycatch>-->
<!--        <echo message="Cleaned distribution, docs"/>-->
<!--    </target>-->


<!--    <target name="compileTest" depends="init">-->
<!--        <javac destdir="${target.tests}"-->
<!--               srcdir="${test.source}">-->
<!--            <classpath refid="classpath.testSource"/>-->
<!--        </javac>-->
<!--        <echo message="Successfully compiled tests"/>-->
<!--    </target>-->

<!--    <target name="test" depends="compileTest">-->
<!--        <mkdir dir="${test.result.dir}"/>-->
<!--        <junitlauncher printsummary="on" haltonfailure="yes">-->
<!--            <classpath refid="classpath.testSource"/>-->
<!--            <testclasses outputdir="${test.result.dir}">-->
<!--                <fileset dir="${target.tests}" includes="**/*.class" />-->
<!--                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>-->
<!--            </testclasses>-->
<!--        </junitlauncher>-->
<!--        <echo message="Test completed"/>-->
<!--    </target>-->

<!--    <target name="xml">-->
<!--        <xmlvalidate failonerror="no" lenient="yes">-->
<!--            <fileset dir="${project.dir}" includes="**/*.xml"/>-->
<!--        </xmlvalidate>-->
<!--    </target>-->

<!--    <target name="native2ascii">-->
<!--        <native2ascii encoding="UTF-8" src="src/main/resources" includes="*.properties" dest="${dist.dir}" />-->
<!--    </target>-->

<!--    <target name="generate_key">-->
<!--        <genkey alias="web3" storepass="webWeb" keystore="${keystore}"-->
<!--                keyalg="RSA"-->
<!--                dname="CN=Ant Group, OU=Jakarta Division, O=Apache.org, C=US"/>-->
<!--    </target>-->

<!--    <target name="javadoc" depends="build">-->
<!--        <delete dir="${doc.dir}"/>-->
<!--        <mkdir dir="${doc.dir}"/>-->
<!--        <javadoc destdir="${doc.dir}">-->
<!--            <classpath refid="classpath.source"/>-->
<!--            <classpath refid="classpath.testSource"/>-->
<!--            <fileset dir="${source.dir}" includes="**/*.java"/>-->
<!--        </javadoc>-->
<!--    </target>-->

<!--    <target name="doc" depends="javadoc">-->
<!--        <jar destfile="${dist.jar}" update="true">-->
<!--            <fileset dir="." includes="${doc.dir}/**"/>-->
<!--        </jar>-->

<!--        <signjar alias="web3"-->
<!--                 storepass="webWeb"-->
<!--                 keystore="${keystore}"-->
<!--                 sigalg="MD5withRSA"-->
<!--                 digestalg="SHA1">-->
<!--            <path>-->
<!--                <file file="${dist.jar}"/>-->
<!--            </path>-->
<!--        </signjar>-->
<!--    </target>-->

<!--    <target name="scp" depends="build">-->
<!--        <sshexec-->
<!--                host="${host}"-->
<!--                port="${port}"-->
<!--                username="${remote_user}"-->
<!--                password="${remote_password}"-->
<!--                command="mkdir -p ${remote_dir_path}"-->
<!--                trust="true" />-->
<!--        <scp-->
<!--                file="${dist.jar}"-->
<!--                todi2r="${remote_user}@${host}:${remote_dir_path}"-->
<!--                password="${remote_password}"-->
<!--                port="${port}"/>-->
<!--    </target>-->

<!--    <target name="alt">-->
<!--        <copy todir="${alt.source.dir}">-->
<!--            <fileset dir="${source.dir}"/>-->
<!--        </copy>-->

<!--        <replace dir="${source.dir}" >-->
<!--            <exclude name="**/*.jar"/>-->
<!--            <replacefilter token="${alt.replace.from}"-->
<!--                           value="${alt.replace.to}"/>-->
<!--        </replace>-->

<!--        <move todir="${source.dir}" includeemptydirs="false">-->
<!--            <fileset dir="${source.dir}">-->
<!--                <exclude name="**/*.jar"/> &lt;!&ndash;fixed&ndash;&gt;-->
<!--            </fileset>-->
<!--            <filtermapper >-->
<!--                <replacestring from="${alt.replace.from}" to="${alt.replace.to}" />-->
<!--            </filtermapper>-->
<!--        </move>-->

<!--        <antcall target="clean"/>-->
<!--        <antcall target="build"/>-->

<!--        <delete dir="${source.dir}"/>-->
<!--        <copy todir="${source.dir}">-->
<!--            <fileset dir="${alt.source.dir}"/>-->
<!--        </copy>-->

<!--        <delete dir="${alt.source.dir}"/>-->
<!--    </target>-->

<!--    <target name="diff">-->
<!--        &lt;!&ndash; <property name="vsc.git.diff_output" /> &ndash;&gt;-->
<!--        <exec executable="git" outputproperty="vcs.git.diff_output">-->
<!--            <arg value="diff" />-->
<!--            <arg value="&#45;&#45;name-only" />-->
<!--        </exec>-->
<!--        <condition property="vcs.git.should_commit" value="true">-->
<!--            <resourcecount count="0">-->
<!--                <intersect>-->
<!--                    <filelist id="vcs.git.files_to_commit" files="${vcs.git.diff_output}"/>-->
<!--                    <filelist files="${vcs.git.diff_files}" />-->
<!--                </intersect>-->
<!--            </resourcecount>-->
<!--        </condition>-->
<!--        <echoproperties prefix="vcs" />-->
<!--        &lt;!&ndash; if set does not contain specified files, do commit &ndash;&gt;-->
<!--        <pathconvert property="vcs.git.files_to_commit_separated" refid="vcs.git.files_to_commit" pathsep=" " />-->
<!--        <exec if:set="vcs.git.should_commit" executable="git">-->
<!--            <arg value="add"/>-->
<!--            <arg line="${vcs.git.files_to_commit_separated}" />-->
<!--        </exec>-->
<!--        <exec if:set="vcs.git.should_commit" executable="git">-->
<!--            <arg value="commit" />-->
<!--        </exec>-->
<!--        <path id="groovy.classpath">-->
<!--            <fileset dir="/usr/share/groovy/lib" includes="*.jar" />-->
<!--        </path>-->
<!--        <script language="groovy" classpathref="groovy.classpath">-->
<!--            println "\u001b[32mЯ уебан\u001b[0m"-->
<!--        </script>-->
<!--    </target>-->

<!--    <target name="env" depends="build">-->
<!--        <java jar="${dist.jar}" fork="true">-->
<!--            <jvmarg line="${jvm.params}"/>-->
<!--        </java>-->
<!--    </target>-->

<!--    <target name="team">-->
<!--        <exec executable="svn">-->
<!--            <arg line="update"/>-->
<!--        </exec>-->

<!--        <exec executable="svn" outputproperty="svn_revision">-->
<!--            <arg line="info &#45;&#45;show-item revision"/>-->
<!--        </exec>-->

<!--        <for list="1,2,3" param="offset">-->
<!--            <sequential>-->
<!--                <antcall target="clean"/>-->
<!--                <antcall target="build"/>-->
<!--                <move file="${dist.jar}" todir="${team.dir}"/>-->
<!--                <move file="${team.dir}/${dist.jar.name}" tofile="${team.dir}/@{offset}.jar"/>-->

<!--                <math result="svn_revision">-->
<!--                    <op datatype="int" op="-">-->
<!--                        <num value="${svn_revision}"/>-->
<!--                        <num value="1"/>-->
<!--                    </op>-->
<!--                </math>-->
<!--            </sequential>-->
<!--        </for>-->

<!--        <zip destfile="${dist.dir}/jars.zip"-->
<!--             basedir="${team.dir}"/>-->
<!--    </target>-->

<!--    <target name="history">-->
<!--        <exec executable="svn" outputproperty="svn_base_revision">-->
<!--            <arg line="info &#45;&#45;show-item revision"/>-->
<!--        </exec>-->
<!--        <trycatch>-->
<!--            <try>-->
<!--                <antcall target="compile"/>-->
<!--                <exec executable="svn" outputproperty="svn_current_revision">-->
<!--                    <arg line="info &#45;&#45;show-item revision"/>-->
<!--                </exec>-->
<!--                <echo message="run svn diff -r ${svn_current_revision}:${svn_base_revision}"/>-->
<!--                <exec executable="svn">-->
<!--                    <arg line="diff -r ${svn_current_revision}:${svn_base_revision}"/>-->
<!--                </exec>-->
<!--            </try>-->
<!--            <catch>-->
<!--                <exec executable="svn" outputproperty="svn_revision">-->
<!--                    <arg line="info &#45;&#45;show-item revision"/>-->
<!--                </exec>-->
<!--                <if>-->
<!--                    <equals arg1="1" arg2="${svn_revision}"/>-->
<!--                    <then>-->
<!--                        <echo message="first revision reached / abort"/>-->
<!--                    </then>-->
<!--                    <else>-->
<!--                        <math result="svn_revision">-->
<!--                            <op datatype="int" op="-">-->
<!--                                <num value="${svn_revision}"/>-->
<!--                                <num value="1"/>-->
<!--                            </op>-->
<!--                        </math>-->
<!--                        <echo message="going down to the history... ${svn_revision}"/>-->
<!--                        <exec executable="svn">-->
<!--                            <arg line="up -r ${svn_revision}"/>-->
<!--                        </exec>-->
<!--                        <runtarget target="history"/>-->
<!--                    </else>-->
<!--                </if>-->
<!--            </catch>-->
<!--        </trycatch>-->
<!--    </target>-->

<!--    <target name="report">-->
<!--        <trycatch>-->
<!--            <try>-->
<!--                <antcall target="test"/>-->
<!--                <tstamp>-->
<!--                    <format property="timestamp" pattern="MM dd yyyy hh:mm aa"/>-->
<!--                </tstamp>-->
<!--                <mkdir dir="${test.result.dir}/${timestamp}"/>-->
<!--                <move todir="${test.result.dir}/${timestamp}">-->
<!--                    <fileset dir="${test.result.dir}">-->
<!--                        <include name="*.xml"/>-->
<!--                    </fileset>-->
<!--                </move>-->
<!--                <exec executable="svn">-->
<!--                    <arg line="add &quot;${test.result.dir}/${timestamp}&quot;"/>-->
<!--                </exec>-->
<!--                <exec executable="svn">-->
<!--                    <arg line="commit -m &quot;Generate test report ${timestamp}&quot;"/>-->
<!--                </exec>-->
<!--                <exec executable="svn">-->
<!--                    <arg line="update"/>-->
<!--                </exec>-->
<!--            </try>-->
<!--            <catch>-->
<!--                <echo message="Tests went wrong, report isn't generated"/>-->
<!--            </catch>-->
<!--        </trycatch>-->
<!--    </target>-->
</project>