<?xml version="1.0"?>
<project name="web3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="lib" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="compile" depends="clean">
        <echo message="***** COMPILING STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
        <echo message="***** COMPILING COMPLETED *****"/>
    </target>

    <target name="build" depends="compile, music">
        <echo message="***** BUILDING STARTED *****"/>
        <copy todir="${build.dir}" >
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="lib"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Daria and Maria" />
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="Main"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.webxml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Daria and Maria" />
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="NoClass" />
            </manifest>
        </war>
        <echo message="***** BUILDING COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEANING STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <delete dir="${doc.dir}"/>
        <echo message="***** CLEANING COMPLETED *****"/>
    </target>

    <target name="music">
        <echo message="***** MUSIC STARTED *****"/>
        <sound>
            <success source="src/main/resources/gta.wav"/>
            <fail source="src/main/resources/zvuk-iz-mema-smert-v-gta-5-gta-v---wasted-3380.wav"/>
        </sound>
    </target>

    <target name="test" depends="build">
        <echo message="***** TESTING STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TESTING COMPLETED *****"/>
    </target>

    <target name="report">
                <antcall target="test"/>
                <tstamp>
                    <format property="timestamp" pattern="MM dd yyyy hh mm aa"/>
                </tstamp>
                <mkdir dir="${test.result.dir}/${timestamp}"/>
                <move todir="${test.result.dir}/${timestamp}">
                    <fileset dir="${junit.report.dir}">
                        <include name="*.xml"/>
                    </fileset>
                </move>
                <exec executable="git">
                    <arg line="add ${test.result.dir}/${timestamp}"/>
                </exec>
                <exec executable="git">
                    <arg line="commit -m 'Generate test report ${timestamp}'"/>
                </exec>
                <exec executable="git">
                    <arg line="pull"/>
                </exec>
    </target>
</project>